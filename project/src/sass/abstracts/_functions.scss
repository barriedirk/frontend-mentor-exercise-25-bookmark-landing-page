@use "sass:math";

@function strip-unit($number) {
  // deprecated
  // @if unitless($number) {
  //   @return $number;
  // } @else {
  //   @return $number / ($number * 0 + 1);
  // }
  @if math.is-unitless($number) {
    @return $number;
  } @else {
    // @return $number / ($number * 0 + 1);
    @return math.div($number, ($number * 0 + 1));
  }
}

/// Converts pixels to rem units
/// @param {Number} $px - The pixel value to convert
/// @return {Number} - The converted rem value
@function rem($px, $base: 16) {
  // @return ($px / $base) * 1rem; // deprecated
  // @return math.div($px, $base) * 1rem;
  @return math.div(strip-unit($px), strip-unit($base)) * 1rem;
}

// How to use
// h1 {
//   font-size: rem(32); // returns 2rem
// }

/// Linear scale calculation between two sizes
/// @param {Number} $min - Minimum size
/// @param {Number} $max - Maximum size
@function font-scale($min, $max) {
  @return calc(
    #{$min}px + (#{$max} - #{$min}) * ((100vw - 320px) / (1280 - 320))
  );
}

// How to use
// h2 {
//   font-size: font-scale(18, 24);
// }

@function theme-darken($color, $amount: 10%) {
  @return darken($color, $amount);
}

//.button:hover {
//  background-color: theme-darken($primary-color, 15%);
// }
