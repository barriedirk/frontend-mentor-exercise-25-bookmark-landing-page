@use "../base//utilities" as *;

@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin absCenter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin absCenterY {
  position: absolute;
  top: 50%;
  left: 0;
  transform: translateY(-50%);
}

// MEDIA QUERY MANAGER
@mixin respondMaxWidth($breakpoint) {
  @if $breakpoint == phone {
    @media only screen and (max-width: 37.5em) {
      @content;
    } //600px
  }
  @if $breakpoint == tab-port {
    @media only screen and (max-width: 56.25em) {
      @content;
    } //900px
  }
  @if $breakpoint == tab-land {
    @media only screen and (max-width: 75em) {
      @content;
    } //1200px
  }
  @if $breakpoint == big-desktop {
    @media only screen and (min-width: 112.5em) {
      @content;
    } //1800
  }
}

@mixin respondMinWidth($breakpoint) {
  @if $breakpoint == phone {
    @media only screen and (min-width: 37.5em) {
      @content;
    } //600px
  }
  @if $breakpoint == tab-port {
    @media only screen and (min-width: 56.25em) {
      @content;
    } //900px
  }
  @if $breakpoint == tab-land {
    @media only screen and (min-width: 75em) {
      @content;
    } //1200px
  }
  @if $breakpoint == big-desktop {
    @media only screen and (min-width: 112.5em) {
      @content;
    } //1800
  }
}

/// Media query shortcut
/// @param {String} $breakpoint - Accepts 'sm', 'md', 'lg', 'xl'
@mixin respond-to($breakpoint) {
  @if $breakpoint == sm {
    @media (max-width: 576px) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (max-width: 768px) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (max-width: 992px) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (max-width: 1200px) {
      @content;
    }
  }
}

// How to use
// .nav {
//   display: flex;
//
//   @include respond-to(md) {
//     flex-direction: column;
//   }
// }

@mixin respond($breakpoint) {
  @if $breakpoint == md {
    @media (min-width: 768px) {
      @content;
    }
  }
}

@mixin button($bg-color, $text-color) {
  background-color: $bg-color;
  color: $text-color;
  padding: 1rem 2rem;
  border: none;
  border-radius: 4px;
  text-transform: uppercase;
  cursor: pointer;

  &:hover {
    opacity: 0.9;
  }
}

// How to use
// .btn-primary {
//   @include button($primary-color, #fff);
// }

@mixin flexRowCenter {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
}

@mixin flexColumnCenter {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// How to use
// .hero {
//   height: 100vh;
//   @include flex-center;
// }

@mixin truncate($width: 100%) {
  max-width: $width;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin bck-contain {
  background-repeat: no-repeat;
  background-size: contain;
  background-position: top left;
}

@mixin bck-cover {
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center center;
}

@mixin underlineHoverCenter(
  $color: currentColor,
  $thickness: 2px,
  $transition: 0.25s
) {
  position: relative;
  text-decoration: none;

  &::after {
    content: "";
    position: absolute;
    width: 100%;
    transform: scaleX(0);
    height: $thickness;
    bottom: -10px;
    left: 0;
    background-color: $color;
    transition: transform $transition ease-out;
  }

  &:hover::after {
    transform: scaleX(0.85);
  }
}
